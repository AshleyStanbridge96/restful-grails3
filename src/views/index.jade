!!! 5
//if IE 7
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 8
  html(lang="en", class="no-js ie", data-ng-app="main", id="ng-app")
//if IE 9
  html(lang="en", class="no-js ie9", data-ng-app="main", id="ng-app")
//if [(gt IE 9)|!(IE)] <!
html(class="no-js", ng-app="main")
  // <![endif]
  head
    meta(charset="utf-8")
    title Restful Web Services in Grails 3
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
    meta(name="description", content="Reveal JS Template")
    link(href="./assets/css/style.css", rel="stylesheet", type="text/css")

  body
    .reveal
      .opi-logo
      .slides
        section(data-state="index-slide")
          h2 Restful Web Services in Grails 3
          p
            img(src='./assets/img/gr8conf2015.png', style="border:none;width:25%;")
          small by Jenn Strater <a href="http://twitter.com/jennstrater" target="_blank"><img style="border:none;margin-top:0px;box-shadow:none;" src="./assets/img/CompanyAndProductLogos/twitter.png"/>@jennstrater</a>
        section(data-state="github-slide", class="github-section")
          h1 <i class="fa fa-icon fa-github"></i>
          p Current
          p
            a(href="http://jlstrater.github.io/restful-grails3") http://jlstrater.github.io/restful-grails3
          p
            a(href="http://github.com/jlstrater/restful-grails3",target="_blank") Slides(source)
        section(data-state="github-slide", class="github-section")
          h1 <i class="fa fa-icon fa-github"></i>
          p Previous Versions
          p Gr8Conf EU
            a(href="https://github.com/jlstrater/restful-grails3/releases/tag/1.0") Source |
            a(href="Gr8ConfEU2015") Slides

        section
          h2 About Me
          p Professional
          ul.ul-no-style
            li.
              <img class="inline-img" src='./assets/img/opi-square-logo.png' style='vertical-align:middle;'>
              Senior Consultant - <a href="http://objectpartners.com" target="_blank" style='vertical-align:middle'>Object Partners</a>
            li.
              <img class="inline-img" src='./assets/img/gr8ladies.png' style='vertical-align:middle;'>
              Co-Founder - <a href="http://www.gr8ladies.org" target="_blank" style='vertical-align:middle'>Gr8Ladies</a>
        section
          h2 About Me
          p Experience
          img(src='./assets/img/techbooks.jpg', style="width: 60%;")
          small source: http://tjvantoll.com/2014/12/29/so-you-want-to-write-a-tech-book/
        section
          h2 About Me
          p Minneapolis, MN
          p <img src='./assets/img/minnesota.png' style="border:none;margin-top:-25px;">
          ul.ul-no-style Connect on Social Media
            li <a href="https://twitter.com/jennstrater" target="_blank">Twitter</a> @jennstrater
            li <a href="https://linkedin.com/in/jennstrater" target="_blank">LinkedIn</a> https://linkedin.com/in/jennstrater
            li <a href="https://github.com/jlstrater" target="_blank">Github</a> https://github.com/jlstrater

        section
          p <img src='./assets/img/secondhandhounds.png' style="border:none; width:12%; height:12%">
          h3 Pet Mom & Foster
          table(align="center")
            tr
              td Pumpkin
              td <img class="inline-img" src='./assets/img/pumpkinloaf.jpg' style="border:none;">
              td Halo
              td <img class="inline-img" src='./assets/img/halofunnyface.jpg' style="border:none;">
              td Gia
              td <img class="inline-img" src='./assets/img/gia.jpg' style="border:none;">
            tr
              td Curly
              td <img class="inline-img" src='./assets/img/curly.jpg' style="border:none;">
              td Juliet
              td <img class="inline-img" src='./assets/img/juliet.jpg' style="border:none;">
              td Elway
              td <img class="inline-img" src='./assets/img/elway.jpg' style="border:none;">

        section
          h2 Agenda
          ul
            li Remedial REST
            li 10 Ways To Improve A RESTful API
            ul
              li with Grails Examples
            li Example

        section
          h2 What this talk will NOT cover
          ul
            li Performance and Scaling
            li Security
            li Ingesting RESTful APIs
            li Documentation
            li Testing

        section
          h2 Remedial REST
        section
          h2 History
          p Described in Roy Fielding's PhD dissertation in 2000
          small Fielding, Roy. <ital><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">Architectural Styles and the Design of Network-based Software Architectures<ital></a>. 2000.

        section
          h2 Definition
          blockquote.
            <b>RE</b>presentational <b>S</b>tate <b>T</b>ransfer (REST) is an architectural style that
            describes how distributed data objects, or resources, can be defined and addressed, stressing the easy exchange
            of information and scalability.<ital>(Fischer 2013.)</ital>
          aside.notes
            NOT a standard or specification

        section
          h2 Goals
          ul
            li To create a uniform interface between components
            li Decouple implementations from the underlying services

        section
          h1 Characteristics
        section
          h2 Uniform Interface
          p Individual Resources are identified using URIs
          img(src='./assets/img/individualresources.png', style="border:none;")
        section
          h2 Uniform Interface
          p Resources are abstracted from the data source and can be manipulated before being sent to a client
          img(src='./assets/img/resourceabstraction.png', style="border:none;height:75%;")
        section
          h2 Uniform Interface
          p <b>Hypermedia As The Engine Of Application State (HATEOAS)</b>

        section
          h2 Stateless
          img(src='./assets/img/isolatedrequests.png', style="border:none;width:35%;")
          ul Self-contained and independent requests
            li Improves scalability
            li Allows for parallel processing of requests
            li Lets resources be viewed in isolation

        section
          h2 Client-Server
          ul Decoupled clients and servers
            li Increases portability
            li Easier to scale

        section
          h2 Layered System
          img(src='./assets/img/intermediaryendpoints.png', style="border:none; width:50%;")
          ul Endpoints can be the terminus or an intermediary service
            li Allows for load balancing and intermediate security enforcers

        section
          h2 Why choose REST?
          ul
            li Easy to implement
            li Usable across many different platforms and languages

        section
          img(src='./assets/img/microservicearchitecture.png')

        section
          h2 Why REST and Grails?
          ul
            li Many helpful defaults
            li Ease of development
            li Shorter development time

        section
          h2 Getting Started

        section
          h2 New in Grails 3
          ul
            li Based on Spring Boot
            li Switched to Gradle for build system
            li Major structural changes
            ul
              li Configuration
              li Scripts

        section
          h2 Scope
          p De-coupled server and client means:
          img(src='./assets/img/nogsps.png', style="border:none;width:50%;")

        section
          h2 Getting Started
          p Resource Transformation
          pre.
            <code class="java">import grails.rest.Resource

            @Resource(uri='/gr8ladies')
            class Gr8Lady {
              String first
              String last
            }</code>
        section
          h2 Getting Started
          p URL mappings
          pre.
            <code class="java">URLmappings.groovy

            "/gr8ladies"(resources:"gr8lady")</code>
          p Or
          pre.
            <code class="java">"/gr8ladies"(resources:"gr8lady") {
              "/chapters"(controller:"chapter", method:"GET")
            }</code>
          small --> /gr8ladies/{id}/chapters

        section
          h2 10 Ways To Improve A RESTful API
          h3 with Grails Examples
        section
          h2 1. Use Appropriate HTTP Status Codes
        section
          h2 HTTP Status Codes
          p Learn the correct status codes for different errors
          table(align="center")
            tr
              th Code
              th Description
            tr
              th 2XX
              th Successful
            tr
              td 200
              td OK
            tr
              th 4XX
              th Client Error
            tr
              td 400
              td Bad Request
            tr
              td 403
              td Forbidden
            tr
              td 404
              td Not Found
            tr
              th 5XX
              th Server Errors
            tr
              td 500
              td Internal Server Error
            tr
              td 502
              td Bad Gateway

          small
            span an exerpt from
            a(href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html", target="_blank") http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html

        section
          h2 Presenting:
          h3 HTTP Status Pets & Fosters
          p Based on <a href="http://httpstatusdogs.com/">HTTP Status Dogs</a> and <a href="https://www.flickr.com/photos/girliemac/sets/72157628409467125">HTTP Status Cats</a>

        section
          h2 2xx
          table
            tr
              td
                img(src='./assets/img/HTTPStatusFosters/200OKJulie.jpg', style="width: 250px;border:none;")
              td
                img(src='./assets/img/HTTPStatusFosters/203NonAuthoritativePumpkin.JPG', style="width: 250px;border:none;")
              td
                img(src='./assets/img/HTTPStatusFosters/204NoContentHalo.jpg', style="width: 250px;border:none;")
              td
                img(src='./assets/img/HTTPStatusFosters/206PartialContentPumpkin.JPG', style="width: 250px;border:none;")
        section
          h2 3xx
          table
              tr
                td
                  img(src='./assets/img/HTTPStatusFosters/300MultipleChoices.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/302Found.JPG', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/303SeeOther.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/307TemporaryRedirect.jpg', style="width: 250px;border:none;")
        section
          h2 4xx
          table
              tr
                td
                  img(src='./assets/img/HTTPStatusFosters/400BadHalo.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/404NotFound.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/406NotAcceptable.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/409Conflict.jpg', style="width: 250px; border:none;")
              tr
                td
                  img(src='./assets/img/HTTPStatusFosters/423Locked.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/424FailedDependencyPumpkin.JPG', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/431RequestHeaderTooLarge.jpg', style="width: 250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/444NoResponseHalo.jpg', style="width: 250px;border:none;")
        section
          h2 5xx
          table
              tr
                td
                  img(src='./assets/img/HTTPStatusFosters/502BadGateway.jpg', style="width:250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/503UnavailableCurly.JPG', style="width:250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/504GatewayTimeout.jpg', style="width:250px;border:none;")
                td
                  img(src='./assets/img/HTTPStatusFosters/599NetworkTimeoutError.jpg', style="width:250px;border:none;")
        section
          h2 Do's and Dont's
          ul
            li 200 is ok ... but not for everything
            li <b>DON'T</b> expect the end user to parse through the message for an error
            li <b>DO</b> Use an appropriate HTTP Error Response
        section
          h2 HTTP Status Codes in Grails
          p Many of the cases are handled by Grails or the server(i.e. 5XXs)
        section
          h2 HTTP Status Codes in Grails
          pre.
            <code class="java">if(someCondition) {
              render status: 4XX
            }</code>
        section
          h2 2. Use the right HTTP verbs
          ul
            li GET to retrieve a resource
            li POST to create a new resource
            li PUT to update an existing resource
            li DELETE to remove an existing resource
        section
          h2 HTTP verbs in Grails
          h3 Resource Annotation
          p.fragment Handled by Default! :)
        section
          h2 HTTP verbs in Grails
          p On each Controller
          pre.
            <code class="java">class Gr8LadyController {
              static allowedMethods = [list: "GET", save: "POST", update: "PUT"]
            }</code>
        section
          h2 HTTP verbs in Grails
          p URL Mappings
          pre.
            <code class="java">"/gr8ladies"(resource: "gr8lady", method: "GET")</code>
        section
          h2 3. Name Endpoints Consistently and Appropriately
          h3 List
          p <code class="http">http://example.com/resource</code>
          h3 Show
          p <code class="http">http://example.com/resource/{id}</code>
        section
          h2 Endpoints
          ul
            li <code class="http">http://example.com/resource/{id}</code>
            li.fragment NOT <code class="http">http://example.com/resource?id=abc123</code>
            li.fragment NOT <code class="http">http://example.com/resource/{id}/?action=delete</code>
            li.fragment NOT <code class="http">http://example.com/resource/add</code>
        section
          h2 4. Style Consistently
          h3 casing
          p <code class="http">/resources</code>
          p NOT
          p <code class="http">/ReSoUrCeS</code>
        section
          h2 Consistent URI style
          p Try Either:
          p <code class="http">/multiWordResources</code>
          p Or:
          p <code class="http">/multi-word-resources</code>
          p And stick to it. Don't Mix and Match!
        section
          h2 Consistent Style
          h3 Resource Names
          p plural nouns preferred
          <code>http://example.com/users</code>
          p vs
          <code>http://example.com/user</code>
        section
          h2 5. Provide Search Functionality
          ul <code>http://example.com/resource?fieldName=value</code>
            li Lookup based on values

        section
          h2 6. Support Multiple Media Types (JSON, XML)
          ul
            li XML and JSON are most common
        section
          h2 Multiple Media Types (JSON, XML) in Grails
          ul
            li XML by default
            li
              p By Parameter
              <code>http://example.com/resource.json</code>
        section
          h2 Multiple Media Types (JSON, XML) in Grails
          p Available formats
          pre.
            <code class="java">grails:
              mime:
                types:
                ...
                json: ['application/json', 'text/json'],
                ...
                xml: ['text/xml', 'application/xml']</code>
        section
          h2 Multiple Media Types (JSON, XML) in Grails
          p By Resource
          pre.
            <code class="java">import grails.rest.Resource

            @Resource(uri='/gr8ladies', formats=['json'])
            class Gr8Lady {
              ...
            }</code>
          p Requesting another type returns a 406 (Not Acceptable)
        section
          h2 Multiple Media Types (JSON, XML) in Grails
          p By RestfulController
          pre.
            <code>class Gr8LadyController extends RestfulController {
              static responseFormats = ['json', 'xml']
            }</code>
          p Remember to add any response formats for versioned mime types
        section
          h2 7. Provide Custom Response Formats
          ul
            li Filter from default responses
            li Provide different responses per version
            li Provide response formats based on security
        section
          h2 Custom Response Formats in Grails
          p Object Marshallers
          p <code>grails-app/init/Bootstrap.groovy</code>
          pre.
            <code class="java">import grails.converters.JSON

            class Bootstrap {
              def init = { servletContext ->
                JSON.registerObjectMarshaller(Gr8Lady) {
                  def returnArray = [:]
                  returnArray['firstName'] = it.first
                  returnArray['lastName'] = it.last
                  returnArray['chapter'] = it.chapter?.name
                  return returnArray
                }
              }
            }</code>
          p Usage
          pre.
            <code>render gr8lady as JSON</code>
        section
          h2 Custom Response Formats in Grails
          p Object Marshallers
          p <code>grails-app/conf/spring/resources.groovy</code>
          pre.
            <code class="java">import grails.converters.JSON
            import org.gr8ladies.ChapterMarshaller

            beans = {
                JSON.registerObjectMarshaller(new ChapterMarshaller())
            }</code>
        section
          h2 Custom Response Formats in Grails
          p Object Marshallers
          pre.
            <code>class Gr8LadyMarshaller implements ObjectMarshaller&#60JSON&#62{
                public boolean supports(Object object) {
                  return object instanceof Gr8Lady
                }

                public void marshalObject(Object object, XML converter) {
                  Gr8Lady gr8lady  = (Gr8Lady)object
                  converter.chars gr8lady.displayName
                }
            }</code>
        section
          h2 8. Use Hypermedia As The Engine Of Application State (HATEOAS)<sup>*</sup>
          p link to the resource and navigation
          pre.
            <code class="javascript">{
              "_links": {
                "self": { "href": "/gr8ladies" },
                "next": [
                  { "href": "/gr8ladies?page=2" }
                ]
              }
            }</code>
        section
          h2 HATEOAS in Grails
          ul
            li JSON
            li Hypertext Application Language (HAL)
            p <code>grails-app/conf/spring/resources.groovy</code>
            pre.
              <code>import grails.rest.render.hal.*
              beans = {
                  halGr8LadyRenderer(HalJsonRenderer, org.gr8ladies.Gr8Lady)
              }</code>
        section
          h2 HATEOAS in Grails
          p Usage: Content Negotiation
          p <code>curl -i -H "Accept: application/hal+json" http://localhost:8080/gr8ladies/1</code>
          pre.
            <code>HTTP/1.1 200 OK
            Server: Apache-Coyote/1.1
            Content-Type: application/hal+json;charset=ISO-8859-1

            {
              "_links": {
                "self": {
                  "href": "http://localhost:8080/gr8ladies/1",
                  "hreflang": "en",
                  "type": "application/hal+json"
                }
              },
              "name": "Grace Hopper"
            }</code>
        section
          h2 9. Or Use Pagination<sup>*</sup>
          p Parameters
          p <code>http://example.com/resource?offset=0&max=10</code>
          pre.
            <code>def list() {
              List gr8ladies = Gr8Lady.list(max: params.max, offset: params.offset)
              respond [results: gr8ladies, max: params.max, offset: params.offset]
            }</code>
        section
          h2 And Versioning<sup>*</sup>
          ul
            li <b>URI</b> <code class="http">http://example.com/v1/resource/{id}</code>
            li <b>Custom Header</b>
            li
              pre.
                <code class="http">GET https&#58;&#47;&#47;example.com/resource
                version&#58; 2.0</code>
            li <b>Content Type</b>
            li
              pre.
                <code class="http">GET https&#58;&#47;&#47;example.com/resource
                Accept&#58; application/vnd.example.v2+json</code>
          aside.notes.
            If you really can't use hypermedia, please at least version your API. There are several ways to do this, each
            with their own pros and cons.  The easiest to implement is to add /v1/ to the URI.  However, this breaks theory
            since the URI is no longer just about the resource data.  Be careful if you choose this route as it can cause
            confusion when some resources are at various version numbers (ie http://example.com/v2/parentResource/v1/childResource).
            Another option is to add the version number to the headers. This maintains the purity of the URI, but makes it
            harder for consumers of the API. You can't just have a one button/link for the GET request.  The last option
            is to specify the version number in the accept header.
        section
          h2 Versioning in Grails
          ul
            ul <b>URI</b>
              li <code class="http">@Resource(uri='/gr8ladies/v1')</code>
              li <code class="http">@Resource(uri='/gr8ladies/v2')</code>
            ul <b>Accept Header</b>
              li <code class="http">"/gr8ladies"(version:'1.0', resources:"gr8lady", namespace: 'v1')</code>
              li <code class="http">"/gr8ladies"(version:'2.0', resources:"gr8lady", namespace: 'v2')</code>

        section
          h2 Read-only Mode
          ul
            li for public APIs
            li or as a security measure

        section
          h2 Read-only Mode in Grails
          pre.
            <code>@Resource(uri="/gr8ladies", readOnly=true)
            class Gr8Lady {
              String first
              ...
            }</code>
        section
          h2 Example
        section
          h2 Related Plugins for other Grails versions

        section
          h2 Spring Security REST Plugin
          p Token based Authentication based on Spring-Security
          p <img class="inline-thumb" src="./assets/img/active-icon.png"/>
          p Last Updated May 2015
          p <a href="https://github.com/alvarosanchez/grails-spring-security-rest">Source & Documentation</a>
          p Greach 2014
          a(href="https://www.youtube.com/watch?v=Va2OlHQdonI") Video

        section
          h2 Restful API Plugin
          p For more complicated APIs
          p Last Updated November 2014
          p <a href="https://github.com/restfulapi/restful-api">Source & Documentation</a>

        section
          h2 Rest Renderer
          p For greater control over data output
          p Last Updated February 2014
          p <a href="https://github.com/danveloper/grails-rest-renderers">Source & Documentation</a>

        section
          h2 Conclusions
          ul
            li REST is an architecture style, not a standard
            li There are many ways to implement REST
            li Grails makes implementing REST easy!
            li Don't reinvent the wheel, use standard practices.

        section
          h3 Questions?
          h1
            img(src='./assets/img/halopanic.jpg', style="border:none;margin:0px;height:500px;width:600px;")
          p <a href="http://twitter.com/jennstrater" target="_blank"><img style="border:none;margin:0px;box-shadow:none;" src="./assets/img/CompanyAndProductLogos/twitter.png"/>@jennstrater</a>
          p jenn@gr8ladies.org

        section
          h2 References
          ul.ul-no-style
            li Kay, Russell. <a href="http://www.computerworld.com/article/2552929/networking/representational-state-transfer--rest-.html">"Representational State Transfer (REST)"</a>. <ital>Computerworld</ital>. 6 Aug 2007. Web
            li Fischer, Ludovico. <a href="http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340">"A Beginner’s Guide to HTTP and REST"</a>. <ital>Tuts+</ital>. 9 Jan 2013. Web
            li Fielding, Roy. <ital><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">Architectural Styles and the Design of Network-based Software Architectures<ital></a>. 2000.

    script(src="./assets/js/app.js")

    // If the query includes 'print-pdf', use the PDF print sheet
    script(type='text/javascript').
      if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      } else if ( window.location.search.match( /print-paper/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = './assets/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
      }

